<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:jdbc="http://www.mulesoft.org/schema/mule/ee/jdbc" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:ajax="http://www.mulesoft.org/schema/mule/ajax" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="EE-3.3.0" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd 
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd 
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd 
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/3.2/mule-data-mapper.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd 
http://www.mulesoft.org/schema/mule/ajax http://www.mulesoft.org/schema/mule/ajax/current/mule-ajax.xsd 
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd 
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd ">
    <jms:activemq-connector name="Active_MQ2" specification="1.1" brokerURL="vm://localhost" validateConnections="true" doc:name="Active_MQ"></jms:activemq-connector>
    <spring:beans>
        <spring:bean id="Derby_Data_Source" class="org.enhydra.jdbc.standard.StandardXADataSource" destroy-method="shutdown">
            <spring:property name="driverName" value="org.apache.derby.jdbc.EmbeddedDriver"/>
            <spring:property name="url" value="jdbc:derby:muleEmbeddedDB;create=true"/>
        </spring:bean>
    </spring:beans>
    <jdbc:connector name="JDBCConnector" dataSource-ref="Derby_Data_Source" validateConnections="true" queryTimeout="-1" pollingFrequency="0" doc:name="JDBCConnector">
        <jdbc:query key="query-addToCart" value="INSERT INTO cart (session_id, product_id, provider, quantity) VALUES (#[header:inbound:sessionId], #[json:productCode], #[json:provider], #[json:qty])"/>
        <jdbc:query key="query-showCart" value="SELECT * FROM cart WHERE session_id = #[header:inbound:sessionId]"/>
        <jdbc:query key="query-clearCart" value="DELETE FROM cart WHERE session_id = #[header:inbound:sessionId]"/>
    </jdbc:connector>
    <data-mapper:config name="barbersParadiseToCanonicalJSON" transformationGraphPath="barbers_paradise_to_canonical_json.grf" doc:name="Barbers Paradise to canonical JSON"></data-mapper:config>
    <data-mapper:config name="vanGoghPaintToCanonicalJSON" transformationGraphPath="van_gogh_paint_to_canonical_json.grf" doc:name="Van Gogh Paint to canonical JSON"></data-mapper:config>
    <data-mapper:config name="consolidateProductDetailsOnCart" transformationGraphPath="consolidateproductdetailsoncart.grf" doc:name="consolidateProductDetailsOnCart"></data-mapper:config>
    <data-mapper:config name="checkoutRequestToPaymentAuthorization" transformationGraphPath="checkoutrequesttopaymentauthorization.grf" doc:name="checkoutRequestToPaymentAuthorization"></data-mapper:config>
    <http:connector name="HttpConnector" enableCookies="true" keepAlive="true" doc:name="HTTP\HTTPS"></http:connector>
    <ee:object-store-caching-strategy name="fetchProductDetailsCachingStrategy" keyGenerationExpression="#[payload['PRODUCT_ID']]" doc:name="Caching Strategy"></ee:object-store-caching-strategy>
    <ee:object-store-caching-strategy name="listProductsBarbersParadiseCachingStrategy" keyGenerationExpression="#[&quot;BARBERSPARADISE&quot;]" doc:name="Caching Strategy"></ee:object-store-caching-strategy>
    <ee:object-store-caching-strategy name="listProductsVangoghPaintStoreCachingStrategy" keyGenerationExpression="#[&quot;VANGOGH&quot;]" doc:name="Caching Strategy"></ee:object-store-caching-strategy>
    <flow name="listProducts" doc:name="listProducts">
        <jms:inbound-endpoint exchange-pattern="request-response" queue="estore.listProducts" connector-ref="Active_MQ2" doc:name="JMS"></jms:inbound-endpoint>
        <set-variable variableName="allProducts" value="#[new java.util.LinkedList()]" doc:name="Initialize output list"></set-variable>
        <all doc:name="All">
            <processor-chain>
                <ee:cache cachingStrategy-ref="listProductsBarbersParadiseCachingStrategy" doc:name="Cache">
                    <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9080" path="barbersparadise/products" method="GET" connector-ref="HttpConnector" doc:name="Fetch products from Barbers Paradise Store"></http:outbound-endpoint>
                </ee:cache>
                <splitter expression="#[json:]" doc:name="Split received products list"></splitter>
                <data-mapper:transform config-ref="barbersParadiseToCanonicalJSON" doc:name="Transform to canonical JSON"></data-mapper:transform>
                <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
                <expression-transformer expression="flowVars['allProducts'].add(payload)" doc:name="Add product to output list"></expression-transformer>
            </processor-chain>
            <processor-chain>
                <ee:cache cachingStrategy-ref="listProductsVangoghPaintStoreCachingStrategy" doc:name="Cache">
                    <flow-ref name="fetchProductsFromVanGoghPaintStore" doc:name="Fetch products from Van Gogh Paint Store"></flow-ref>
                </ee:cache>
                <collection-splitter doc:name="Split received collection"></collection-splitter>
                <data-mapper:transform config-ref="vanGoghPaintToCanonicalJSON" doc:name="Transform to canonical JSON"></data-mapper:transform>
                <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
                <expression-transformer expression="flowVars['allProducts'].add(payload)" doc:name="Add product to output list"></expression-transformer>
            </processor-chain>
        </all>
        <expression-transformer expression="allProducts" doc:name="Set payload to output list"></expression-transformer>
    </flow>
    <sub-flow name="fetchProductsFromVanGoghPaintStore" doc:name="fetchProductsFromVanGoghPaintStore">
        <cxf:jaxws-client operation="listProducts" serviceClass="com.mulesoft.example.estore.clients.provider.vangoghpaintstore.B2BStore" port="80" enableMuleSoapHeaders="true" doc:name="Prepare SOAP request"></cxf:jaxws-client>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9081" path="vangoghpaintstore" doc:name="Invoke SOAP request"></http:outbound-endpoint>
    </sub-flow>
    <flow name="addToCart" doc:name="addToCart">
        <jms:inbound-endpoint queue="estore.addToCart" connector-ref="Active_MQ2" doc:name="JMS"></jms:inbound-endpoint>
        <jdbc:outbound-endpoint exchange-pattern="one-way" queryKey="query-addToCart" queryTimeout="-1" connector-ref="JDBCConnector" doc:name="Store product on cart table"></jdbc:outbound-endpoint>
    </flow>
    <flow name="showCart" doc:name="showCart">
        <jms:inbound-endpoint exchange-pattern="request-response" queue="estore.showCart" connector-ref="Active_MQ2" doc:name="JMS"></jms:inbound-endpoint>
        <flow-ref name="subflow-showCart" doc:name="subflow-showCart"></flow-ref>
    </flow>
    <sub-flow name="subflow-showCart" doc:name="subflow-showCart">
        <jdbc:outbound-endpoint exchange-pattern="request-response" queryKey="query-showCart" queryTimeout="-1" connector-ref="JDBCConnector" doc:name="Fetch cart contents from database"></jdbc:outbound-endpoint>
        <set-variable variableName="grandTotal" value="#[0]" doc:name="Initialize grand total"></set-variable>
        <set-variable variableName="cartItems" value="#[new java.util.LinkedList()]" doc:name="Initialize cart items list"></set-variable>
        <foreach doc:name="Foreach">
            <choice doc:name="Choice">
                <when expression="payload['PROVIDER'].equals('Barber\'s Paradise Store')">
                    <processor-chain>
                        <enricher target="#[header:outbound:productDetails]" doc:name="Store product details as message property (enrich)">
                            <ee:cache cachingStrategy-ref="fetchProductDetailsCachingStrategy" doc:name="Cache">
                                <flow-ref name="fetchProductDetailsFromBarbersParadise" doc:name="fetchProductDetailsFromBarbersParadise"></flow-ref>
                            </ee:cache>
                        </enricher>
                    </processor-chain>
                </when>
                <when expression="payload['PROVIDER'].equals('Van Gogh\'s Paint Store')">
                    <processor-chain>
                        <enricher target="#[header:outbound:productDetails]" doc:name="Store product details as message property (enrich)">
                            <ee:cache cachingStrategy-ref="fetchProductDetailsCachingStrategy" doc:name="Cache">
                                <flow-ref name="fetchProductDetailsFromVanGoghPaintStore" doc:name="fetchProductDetailsFromVanGoghPaintStore"></flow-ref>
                            </ee:cache>
                        </enricher>
                    </processor-chain>
                </when>
            </choice>
            <data-mapper:transform config-ref="consolidateProductDetailsOnCart" doc:name="Consolidate cart item info and subtotal">
                <data-mapper:input-arguments>
                    <data-mapper:input-argument key="price">#[(new groovy.json.JsonSlurper().parseText(message.outboundProperties['productDetails'].toString())).price]</data-mapper:input-argument>
                    <data-mapper:input-argument key="providerId">#[(new groovy.json.JsonSlurper().parseText(message.outboundProperties['productDetails'].toString())).providerId]</data-mapper:input-argument>
                    <data-mapper:input-argument key="product_id">#[(new groovy.json.JsonSlurper().parseText(message.outboundProperties['productDetails'].toString())).productId]</data-mapper:input-argument>
                    <data-mapper:input-argument key="productDescription">#[(new groovy.json.JsonSlurper().parseText(message.outboundProperties['productDetails'].toString())).productDescription]</data-mapper:input-argument>
                </data-mapper:input-arguments>
            </data-mapper:transform>
            <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
            <set-variable variableName="grandTotal" value="#[grandTotal + (new Float((new groovy.json.JsonSlurper().parseText(payload)).subtotal)).floatValue()]" doc:name="Sum item subtotal to grand total"></set-variable>
            <expression-transformer expression="flowVars['cartItems'].add(payload)" doc:name="Add cart item to list"></expression-transformer>
        </foreach>
        <set-property propertyName="cartTotal" value="#[grandTotal]" doc:name="Set cartTotal message property with grand total"></set-property>
        <expression-transformer expression="cartItems" doc:name="Set payload to cart items list"></expression-transformer>
    </sub-flow>
    <sub-flow name="fetchProductDetailsFromBarbersParadise" doc:name="fetchProductDetailsFromBarbersParadise">
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9080" path="barbersparadise/products/#[payload['PRODUCT_ID']]" doc:name="Fetch product info from Barber's Paradise Store"></http:outbound-endpoint>
        <data-mapper:transform config-ref="barbersParadiseToCanonicalJSON" doc:name="Transform to canonical JSON"></data-mapper:transform>
        <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
    </sub-flow>
    <sub-flow name="fetchProductDetailsFromVanGoghPaintStore" doc:name="fetchProductDetailsFromVanGoghPaintStore">
        <expression-transformer expression="payload['PRODUCT_ID']" doc:name="Assing product id to payload"></expression-transformer>
        <flow-ref name="invokeVanGoghGetProductInfoSOAPService" doc:name="invokeVanGoghGetProductInfoSOAPService"></flow-ref>
        <data-mapper:transform config-ref="vanGoghPaintToCanonicalJSON" doc:name="Transform to canonical JSON"></data-mapper:transform>
        <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
    </sub-flow>
    <sub-flow name="invokeVanGoghGetProductInfoSOAPService" doc:name="invokeVanGoghGetProductInfoSOAPService">
        <cxf:jaxws-client operation="getProductInfo" serviceClass="com.mulesoft.example.estore.clients.provider.vangoghpaintstore.B2BStore" port="80" enableMuleSoapHeaders="true" doc:name="Prepare SOAP request"></cxf:jaxws-client>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9081" path="vangoghpaintstore" doc:name="Invoke SOAP request"></http:outbound-endpoint>
    </sub-flow>
    <flow name="clearCart" doc:name="clearCart">
        <jms:inbound-endpoint queue="estore.clearCart" connector-ref="Active_MQ2" doc:name="JMS"></jms:inbound-endpoint>
        <jdbc:outbound-endpoint exchange-pattern="one-way" queryKey="query-clearCart" queryTimeout="-1" connector-ref="JDBCConnector" doc:name="Delete cart contents"></jdbc:outbound-endpoint>
    </flow>
    <flow name="doCheckout" doc:name="doCheckout">
        <jms:inbound-endpoint exchange-pattern="request-response" queue="estore.doCheckout" connector-ref="Active_MQ2" doc:name="JMS"></jms:inbound-endpoint>
        <enricher doc:name="Enrich message with cart details">
            <flow-ref name="subflow-showCart" doc:name="subflow-showCart"></flow-ref>
            <enrich source="#[message.outboundProperties['cartTotal'].toString()]" target="#[header:outbound:grandTotal]"></enrich>
            <enrich source="#[payload]" target="#[header:outbound:cartContents]"></enrich>
        </enricher>
        <data-mapper:transform config-ref="checkoutRequestToPaymentAuthorization" doc:name="Transform checkout request to payment authorization request">
            <data-mapper:input-arguments>
                <data-mapper:input-argument key="grandTotal">#[header:outbound:grandTotal]</data-mapper:input-argument>
            </data-mapper:input-arguments>
        </data-mapper:transform>
        <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
        <enricher doc:name="Enrich message with payment authorization results">
            <flow-ref name="requestPaymentAuthorizationToBank" doc:name="requestPaymentAuthorizationToBank"></flow-ref>
            <enrich source="#[xpath:/authorizationResponse/result]" target="#[header:outbound:paymentResult]"></enrich>
            <enrich source="#[xpath:/authorizationResponse/reason]" target="#[header:outbound:paymentReason]"></enrich>
        </enricher>
        <choice doc:name="Choice">
            <when expression="#[header:paymentResult=APPROVED]">
                <processor-chain>
                    <set-variable variableName="orders" value="#[new java.util.LinkedList()]" doc:name="Initialize order numbers list"></set-variable>
                    <foreach collection="#[(new groovy.json.JsonSlurper().parseText(message.outboundProperties['cartContents'].toString()))]" doc:name="For each item on the cart">
                        <choice doc:name="Choice">
                            <when expression="#[payload['providerId'] == 'Barber\'s Paradise Store']">
                                <processor-chain>
                                    <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9080" path="barbersparadise/placeOrder" doc:name="Place order on Barber's Paradise Store"></http:outbound-endpoint>
                                </processor-chain>
                            </when>
                            <when expression="#[payload['providerId'] == 'Van Gogh\'s Paint Store']">
                                <processor-chain>
                                    <expression-transformer expression="[ payload.productId, new Integer(payload.qty)].toArray()" doc:name="Set parameters to place order"></expression-transformer>
                                    <flow-ref name="placeOrderOnVanGoghPaintStore" doc:name="placeOrderOnVanGoghPaintStore"></flow-ref>
                                </processor-chain>
                            </when>
                        </choice>
                        <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>
                        <expression-transformer expression="flowVars['orders'].add(&quot;\&quot;&quot; + payload.toString() + &quot;\&quot;&quot;)" doc:name="Add order to orders list"></expression-transformer>
                    </foreach>
                    <expression-transformer expression="&quot;{\&quot;result\&quot;: \&quot;APPROVED\&quot;, \&quot;orders\&quot;: &quot; + flowVars[&quot;orders&quot;].toString() + &quot;}&quot;" doc:name="Build checkout sucessful message"></expression-transformer>
                </processor-chain>
            </when>
            <when expression="#[header:paymentResult=FAILED]">
                <processor-chain>
                    <expression-transformer expression="&quot;{\&quot;result\&quot;: \&quot;FAILED\&quot;, \&quot;reason\&quot;: \&quot;&quot; + message.outboundProperties[&quot;paymentReason&quot;] + &quot;\&quot;}&quot;" doc:name="Build payment rejected message"></expression-transformer>
                </processor-chain>
            </when>
        </choice>
        <catch-exception-strategy>
            <expression-transformer expression="&quot;{\&quot;result\&quot;: \&quot;FAILED\&quot;, \&quot;reason\&quot;: \&quot;Unable to process payment with bank due to communication problems or invalid credit card information. Check you're submitting a 16-digit credit card number, a 3-digit security code, a name and an address.\&quot;}&quot;" doc:name="Build error response"></expression-transformer>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="requestPaymentAuthorizationToBank" doc:name="requestPaymentAuthorizationToBank">
        <remove-property propertyName="cartContents" doc:name="Remove cart contents property to call bank"></remove-property>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="10000" path="bank/authorizePayment" doc:name="Request payment authorization to bank"></http:outbound-endpoint>
    </sub-flow>
    <sub-flow name="placeOrderOnVanGoghPaintStore" doc:name="placeOrderOnVanGoghPaintStore">
        <cxf:jaxws-client operation="orderProduct" serviceClass="com.mulesoft.example.estore.clients.provider.vangoghpaintstore.B2BStore" port="80" enableMuleSoapHeaders="true" doc:name="Prepare SOAP request"></cxf:jaxws-client>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9081" path="vangoghpaintstore" doc:name="Invoke SOAP request"></http:outbound-endpoint>
    </sub-flow>
</mule>
