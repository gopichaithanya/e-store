
/*
 * 
 */

package com.mulesoft.example.estore.clients.provider.vangoghpaintstore;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.1.3
 * Mon May 28 16:33:54 GMT-03:00 2012
 * Generated source version: 2.1.3
 * 
 */


@WebServiceClient(name = "B2BStoreService", 
                  wsdlLocation = "http://localhost:9081/vangoghpaintstore?wsdl",
                  targetNamespace = "http://vangoghpaintstore.provider.services.estore.example.mulesoft.com/") 
public class B2BStoreService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://vangoghpaintstore.provider.services.estore.example.mulesoft.com/", "B2BStoreService");
    public final static QName B2BStorePort = new QName("http://vangoghpaintstore.provider.services.estore.example.mulesoft.com/", "B2BStorePort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:9081/vangoghpaintstore?wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from http://localhost:9081/vangoghpaintstore?wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public B2BStoreService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public B2BStoreService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public B2BStoreService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns B2BStore
     */
    @WebEndpoint(name = "B2BStorePort")
    public B2BStore getB2BStorePort() {
        return super.getPort(B2BStorePort, B2BStore.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns B2BStore
     */
    @WebEndpoint(name = "B2BStorePort")
    public B2BStore getB2BStorePort(WebServiceFeature... features) {
        return super.getPort(B2BStorePort, B2BStore.class, features);
    }

}
